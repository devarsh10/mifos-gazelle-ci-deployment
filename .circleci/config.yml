# CircleCI 2.1 configuration for Mifos Gazelle deployment automation

version: 2.1

# Define executors: Environments where jobs will run
executors:
  # Ubuntu 20.04 executor using CircleCI's base image
  ubuntu-2004:
    docker:
      - image: cimg/base:stable # Using stable base image
    resource_class: large # Use a larger resource class for Docker operations

# Define jobs: Individual tasks in the workflow
jobs:
  deploy-and-verify-mifos-gazelle:
    executor: ubuntu-2004 # Use the defined Ubuntu 20.04 executor
    steps:
      - checkout # Step to check out the repository code into the working directory
      - setup_remote_docker: # This step provisions a dedicated Docker environment
          docker_layer_caching: true # Enable Docker layer caching for faster builds

      - run:
          name: Install Dependencies (Docker Compose, Kubectl, KinD)
          command: |
            echo "Updating apt package list..."
            sudo apt-get update -y

            echo "Installing necessary packages..."
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common jq

            echo "Installing Docker Compose (version 1.29.2)..."
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            echo "Verifying Docker and Docker Compose installation..."
            docker --version # Docker daemon is provided by setup_remote_docker
            docker-compose --version

            echo "Installing kubectl (Kubernetes command-line tool)..."
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client

            echo "Installing KinD (Kubernetes in Docker)..."
            # For AMD64 / x86_64
            [ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind
            kind version

      - run:
          name: Create KinD Cluster
          command: |
            echo "Creating KinD cluster..."
            # Create a KinD cluster. This will run Kubernetes inside a Docker container.
            # Using --wait to ensure the cluster is ready before proceeding.
            kind create cluster --name mifos-gazelle-cluster --wait 300s # Wait up to 5 minutes

            echo "Setting KUBECONFIG for KinD cluster..."
            mkdir -p ~/.kube
            # Get the kubeconfig for the KinD cluster
            kind get kubeconfig --name mifos-gazelle-cluster > ~/.kube/config.tmp

            # Extract the IP address from the DOCKER_HOST environment variable
            # DOCKER_HOST is typically in the format tcp://<IP>:<PORT>
            DOCKER_IP=$(echo $DOCKER_HOST | sed -E 's/tcp:\/\/(.*):.*/\1/')
            echo "Detected DOCKER_IP: $DOCKER_IP"

            # Replace 127.0.0.1 in the kubeconfig with the DOCKER_IP
            # This ensures kubectl connects to the remote Docker daemon's IP where KinD is running
            sed -i "s/server: https:\/\/127.0.0.1:/server: https:\/\/$DOCKER_IP:/g" ~/.kube/config.tmp

            # Move the modified kubeconfig to the final location
            mv ~/.kube/config.tmp ~/.kube/config
            chmod 600 ~/.kube/config
            export KUBECONFIG=~/.kube/config
            echo "KUBECONFIG set to $KUBECONFIG"

            echo "Verifying KinD cluster nodes..."
            # Now kubectl should be able to connect to the KinD cluster
            kubectl get nodes

      - run:
          name: Run Mifos Gazelle Deployment Script
          command: |
            echo "Executing Mifos Gazelle's ./run.sh script..."
            # Ensure KUBECONFIG is set for this step
            export KUBECONFIG=~/.kube/config
            # Mifos Gazelle's run.sh script might build Docker images.
            # KinD can load images directly from the Docker daemon used by the host.
            # If run.sh builds images, they will be available to KinD.
            ./run.sh
            echo "Mifos Gazelle deployment script execution completed."

      - run:
          name: Wait for Kubernetes Pods to be Ready
          command: |
            echo "Waiting for all Kubernetes pods in the 'default' namespace to reach 'Running' state..."
            # Ensure KUBECONFIG is set for this step
            export KUBECONFIG=~/.kube/config
            # Loop for up to 10 minutes (60 attempts * 10 seconds)
            timeout 600s bash -c '
              for i in $(seq 1 60); do
                # Get names of pods that are NOT in "Running" state
                UNREADY_PODS=$(kubectl get pods -n default -o json | jq -r ".items[] | select(.status.phase != \"Running\") | .metadata.name")
                if [ -z "$UNREADY_PODS" ]; then
                  echo "All pods in default namespace are running."
                  break # Exit loop if all pods are running
                else
                  echo "Attempt $i: Still waiting for these pods to be Running: $UNREADY_PODS"
                  kubectl get pods -n default # Show current pod status
                  sleep 10 # Wait 10 seconds before next check
                fi
                if [ $i -eq 60 ]; then
                  echo "Timeout: Not all pods in default namespace are running after 10 minutes."
                  exit 1 # Exit with error if timeout reached
                fi
              done
            '
            echo "All required Kubernetes pods are running."

      - run:
          name: Verify Deployment with Curl
          command: |
            echo "Attempting to retrieve URL for 'fineract-cn-api-gateway' service..."
            # Ensure KUBECONFIG is set for this step
            export KUBECONFIG=~/.kube/config

            SERVICE_URL=""
            ATTEMPTS=0
            MAX_ATTEMPTS=30 # Max 5 minutes (30 * 10 seconds) to get service URL

            while [ -z "$SERVICE_URL" ] && [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              echo "Attempt $((ATTEMPTS+1)): Getting service URL..."
              # For KinD, services are typically exposed via NodePort or LoadBalancer.
              # We'll get the Node IP and the NodePort of the service.
              NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
              SERVICE_NODEPORT=$(kubectl get service fineract-cn-api-gateway -n default -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}' 2>/dev/null)

              if [ -n "$NODE_IP" ] && [ -n "$SERVICE_NODEPORT" ]; then
                SERVICE_URL="http://$NODE_IP:$SERVICE_NODEPORT"
                echo "Constructed service URL: $SERVICE_URL"
              else
                echo "Node IP ($NODE_IP) or Service NodePort ($SERVICE_NODEPORT) not yet available. Retrying in 10 seconds..."
                sleep 10
              fi
              ATTEMPTS=$((ATTEMPTS+1))
            done

            if [ -z "$SERVICE_URL" ]; then
              echo "Error: Could not determine 'fineract-cn-api-gateway' service URL after multiple attempts."
              exit 1 # Fail the job if URL cannot be obtained
            fi

            echo "Mifos Gazelle API Gateway URL: $SERVICE_URL"

            echo "Performing health check curl to $SERVICE_URL/actuator/health..."
            # Perform a curl request to the health endpoint and capture the HTTP status code
            curl_status=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/actuator/health")
            echo "Curl to $SERVICE_URL/actuator/health returned HTTP status: $curl_status"

            # Check if the HTTP status code indicates success (2xx range)
            if [[ "$curl_status" -ge 200 && "$curl_status" -lt 300 ]]; then
              echo "Mifos Gazelle API Gateway is healthy (HTTP $curl_status). Deployment successful!"
            else
              echo "Error: Mifos Gazelle API Gateway did not return a healthy status (HTTP $curl_status). Deployment verification failed."
              exit 1 # Fail the job if health check is unsuccessful
            fi

# Define workflows: Orchestrate jobs
workflows:
  version: 2
  build-and-deploy-mifos-gazelle: # Name of the workflow
    jobs:
      - deploy-and-verify-mifos-gazelle # Run the defined job
