version: 2.1

# Define custom commands for minimal setup
commands:
  basic_system_setup:
    description: "Basic system setup and verification"
    steps:
      - run:
          name: System information and basic setup
          command: |
            echo "=== System Information ==="
            echo "Architecture: $(uname -m)"
            echo "OS: $(lsb_release -d)"
            echo "Kernel: $(uname -r)"
            echo "CPU cores: $(nproc)"
            echo "Memory: $(free -h | grep '^Mem:' | awk '{print $2}')"
            echo "Disk space: $(df -h / | tail -1 | awk '{print $4}')"
            
            # Update package manager
            sudo apt-get update
            
            # Install only absolutely essential tools that run.sh might need
            sudo apt-get install -y curl wget git

  deploy_mifos_gazelle:
    description: "Deploy Mifos Gazelle using run.sh script - let it handle everything"
    parameters:
      apps:
        type: string
        default: "all"
        description: "Apps to deploy (vnext|phee|mifosx|all)"
      debug:
        type: boolean
        default: true
        description: "Enable debug mode"
    steps:
      - run:
          name: Deploy Mifos Gazelle with run.sh
          command: |
            # Make the run script executable
            chmod +x ./run.sh
            
            # Let run.sh handle all the heavy lifting
            echo "=== Starting Mifos Gazelle Deployment ==="
            echo "Apps to deploy: << parameters.apps >>"
            echo "Debug mode: << parameters.debug >>"
            echo "User: $USER"
            echo "Architecture: $(uname -m)"
            
            # Deploy using run.sh - this should handle k3s, helm, etc.
            if [[ "<< parameters.debug >>" == "true" ]]; then
              sudo ./run.sh -m deploy -u $USER -a << parameters.apps >> -d true
            else
              sudo ./run.sh -m deploy -u $USER -a << parameters.apps >>
            fi
          no_output_timeout: 45m  # Increased timeout since run.sh does everything

  verify_deployment:
    description: "Verify deployment using kubectl (should be installed by run.sh)"
    steps:
      - run:
          name: Verify Mifos Gazelle deployment
          command: |
            echo "=== Verifying Mifos Gazelle Deployment ==="
            
            # Check if kubectl is available (should be installed by run.sh)
            if command -v kubectl &> /dev/null; then
              echo "kubectl is available"
              
              echo "=== Kubernetes Cluster Info ==="
              kubectl cluster-info || echo "Could not get cluster info"
              
              echo "=== Checking namespaces ==="
              kubectl get namespaces || echo "Could not get namespaces"
              
              echo "=== Checking all pods ==="
              kubectl get pods --all-namespaces || echo "Could not get pods"
              
              echo "=== Checking services ==="
              kubectl get svc --all-namespaces || echo "Could not get services"
              
              echo "=== Checking nodes ==="
              kubectl get nodes || echo "Could not get nodes"
            else
              echo "kubectl not found - run.sh may not have completed successfully"
              exit 1
            fi

  test_endpoints:
    description: "Test deployed endpoints"
    steps:
      - run:
          name: Test Mifos Gazelle endpoints
          command: |
            echo "=== Testing Mifos Gazelle Endpoints ==="
            
            if ! command -v kubectl &> /dev/null; then
              echo "kubectl not available - cannot test endpoints"
              exit 1
            fi
            
            # Get all services
            echo "=== Available Services ==="
            kubectl get svc --all-namespaces
            
            # Test basic connectivity to services
            echo "=== Testing Service Connectivity ==="
            
            # Function to test a service in a namespace
            test_service() {
              local namespace=$1
              local service=$2
              local port=$3
              
              if kubectl get svc -n $namespace $service &>/dev/null; then
                echo "Testing $service in $namespace namespace..."
                # Port forward and test
                kubectl port-forward -n $namespace svc/$service $port:$port &
                PID=$!
                sleep 5
                if curl -f --connect-timeout 10 http://localhost:$port/health 2>/dev/null; then
                  echo "✓ $service health check passed"
                else
                  echo "✗ $service health check failed (may be normal if no health endpoint)"
                fi
                kill $PID 2>/dev/null || true
              else
                echo "Service $service not found in namespace $namespace"
              fi
            }
            
            # Test common services (these may vary based on what's actually deployed)
            test_service "mojaloop" "ml-api-adapter" "3000"
            test_service "paymenthub" "ph-ee-connector-ams-mifos" "8080"
            test_service "fineract" "fineract-server" "8080"
            
            echo "=== Endpoint Testing Completed ==="

# Define jobs for different architectures
jobs:
  deploy-test-amd64:
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - checkout
      - basic_system_setup
      - deploy_mifos_gazelle:
          apps: "all"
          debug: true
      - verify_deployment
      - test_endpoints
      - run:
          name: Generate deployment report
          command: |
            echo "=== Mifos Gazelle Deployment Report (AMD64) ===" > deployment_report_amd64.txt
            echo "Deployment Date: $(date)" >> deployment_report_amd64.txt
            echo "Architecture: $(uname -m)" >> deployment_report_amd64.txt
            echo "OS: $(lsb_release -d)" >> deployment_report_amd64.txt
            echo "" >> deployment_report_amd64.txt
            
            if command -v kubectl &> /dev/null; then
              echo "Kubernetes Version: $(kubectl version --short 2>/dev/null || echo 'Could not get version')" >> deployment_report_amd64.txt
              echo "" >> deployment_report_amd64.txt
              echo "=== Namespaces ===" >> deployment_report_amd64.txt
              kubectl get namespaces >> deployment_report_amd64.txt 2>/dev/null || echo "Could not get namespaces" >> deployment_report_amd64.txt
              echo "" >> deployment_report_amd64.txt
              echo "=== All Pods ===" >> deployment_report_amd64.txt
              kubectl get pods --all-namespaces >> deployment_report_amd64.txt 2>/dev/null || echo "Could not get pods" >> deployment_report_amd64.txt
              echo "" >> deployment_report_amd64.txt
              echo "=== All Services ===" >> deployment_report_amd64.txt
              kubectl get svc --all-namespaces >> deployment_report_amd64.txt 2>/dev/null || echo "Could not get services" >> deployment_report_amd64.txt
            else
              echo "kubectl not available - deployment may have failed" >> deployment_report_amd64.txt
            fi
            
            cat deployment_report_amd64.txt
      - store_artifacts:
          path: deployment_report_amd64.txt
      - run:
          name: Optional cleanup
          command: |
            echo "Deployment completed on AMD64. To cleanup:"
            echo "sudo ./run.sh -m cleanapps -u $USER -d true  # Clean apps only"
            echo "sudo ./run.sh -m cleanall -u $USER -d true   # Clean everything"
          when: always

  deploy-test-arm64:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.large  # ARM64 resource class
    steps:
      - checkout
      - basic_system_setup
      - deploy_mifos_gazelle:
          apps: "all"
          debug: true
      - verify_deployment
      - test_endpoints
      - run:
          name: Generate deployment report
          command: |
            echo "=== Mifos Gazelle Deployment Report (ARM64) ===" > deployment_report_arm64.txt
            echo "Deployment Date: $(date)" >> deployment_report_arm64.txt
            echo "Architecture: $(uname -m)" >> deployment_report_arm64.txt
            echo "OS: $(lsb_release -d)" >> deployment_report_arm64.txt
            echo "" >> deployment_report_arm64.txt
            
            if command -v kubectl &> /dev/null; then
              echo "Kubernetes Version: $(kubectl version --short 2>/dev/null || echo 'Could not get version')" >> deployment_report_arm64.txt
              echo "" >> deployment_report_arm64.txt
              echo "=== Namespaces ===" >> deployment_report_arm64.txt
              kubectl get namespaces >> deployment_report_arm64.txt 2>/dev/null || echo "Could not get namespaces" >> deployment_report_arm64.txt
              echo "" >> deployment_report_arm64.txt
              echo "=== All Pods ===" >> deployment_report_arm64.txt
              kubectl get pods --all-namespaces >> deployment_report_arm64.txt 2>/dev/null || echo "Could not get pods" >> deployment_report_arm64.txt
              echo "" >> deployment_report_arm64.txt
              echo "=== All Services ===" >> deployment_report_arm64.txt
              kubectl get svc --all-namespaces >> deployment_report_arm64.txt 2>/dev/null || echo "Could not get services" >> deployment_report_arm64.txt
            else
              echo "kubectl not available - deployment may have failed" >> deployment_report_arm64.txt
            fi
            
            cat deployment_report_arm64.txt
      - store_artifacts:
          path: deployment_report_arm64.txt
      - run:
          name: Optional cleanup
          command: |
            echo "Deployment completed on ARM64. To cleanup:"
            echo "sudo ./run.sh -m cleanapps -u $USER -d true  # Clean apps only"
            echo "sudo ./run.sh -m cleanall -u $USER -d true   # Clean everything"
          when: always

# Define workflows
workflows:
  version: 2
  test-multi-arch:
    jobs:
      - deploy-test-amd64:
          filters:
            branches:
              only:
                - main
                - develop
                - /^feature\/.*/
                - /^hotfix\/.*/
      - deploy-test-arm64:
          filters:
            branches:
              only:
                - main
                - develop
                - /^feature\/.*/
                - /^hotfix\/.*/

  # Alternative: Test one architecture at a time
  test-amd64-only:
    jobs:
      - deploy-test-amd64:
          filters:
            branches:
              only:
                - /^test-amd64\/.*/

  test-arm64-only:
    jobs:
      - deploy-test-arm64:
          filters:
            branches:
              only:
                - /^test-arm64\/.*/